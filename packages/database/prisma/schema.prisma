generator client {
  provider = "prisma-client-js"
  // output   = "./../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum PeriodType {
  S
  V
}

enum CourseState {
  PENDING
  COURSING
  FINISHED
}

model Major {
  id   Int    @id @default(autoincrement()) @db.SmallInt
  name String @unique @db.VarChar(50)

  users User[]
}

model Role {
  id   Int    @id @default(autoincrement()) @db.SmallInt
  name String @unique @db.VarChar(5)

  users User[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(15)
  name      String   @db.VarChar(50)
  lastname  String   @db.VarChar(50)
  majorId   Int?     @db.SmallInt
  verified  Boolean  @default(false)
  roleId    Int      @default(1) @db.SmallInt
  createdAt DateTime @default(now()) @db.Date

  major Major? @relation(fields: [majorId], references: [id])
  role  Role   @relation(fields: [roleId], references: [id])

  userPeriods   UserPeriod[]
  tasks         Task[]
  tutoringPosts TutoringPost[]
  notifications Notification[]
}

model Period {
  id        Int        @id @default(autoincrement())
  type      PeriodType
  number    Int        @db.SmallInt
  year      Int        @db.SmallInt
  startDate DateTime   @db.Date
  endDate   DateTime   @db.Date

  userPeriods UserPeriod[]
  courses     Course[]

  @@unique([type, number, year])
}

model UserPeriod {
  id             Int      @id @default(autoincrement())
  enrollmentDate DateTime @default(now()) @db.Timestamp(3)
  userId         Int
  periodId       Int

  user   User   @relation(fields: [userId], references: [id])
  period Period @relation(fields: [periodId], references: [id])

  @@unique([userId, periodId])
}

model Teacher {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(50)
  lastname String @db.VarChar(50)

  courses Course[]
}

model Course {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(100)
  code      String      @db.VarChar(10)
  state     CourseState @default(PENDING)
  teacherId Int?
  credits   Int         @db.SmallInt
  periodId  Int

  teacher Teacher? @relation(fields: [teacherId], references: [id])
  period  Period   @relation(fields: [periodId], references: [id])

  tasks Task[]
}

model TaskState {
  id   Int    @id @default(autoincrement()) @db.SmallInt
  name String @unique @db.VarChar(20)

  tasks        Task[]
  deliverables Deliverable[]
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(15)
  description String   @db.VarChar(100)
  stateId     Int      @default(1) @db.SmallInt
  percentage  Int      @default(0) @db.SmallInt
  endDate     DateTime @db.Timestamp(0)
  userId      Int
  courseId    Int

  state  TaskState @relation(fields: [stateId], references: [id])
  user   User      @relation(fields: [userId], references: [id])
  course Course    @relation(fields: [courseId], references: [id])

  deliverables Deliverable[]
}

model Deliverable {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(15)
  stateId          Int      @default(1) @db.SmallInt
  percentageOfTask Int      @default(0) @db.SmallInt
  date             DateTime @db.Timestamp(0)
  taskId           Int

  state TaskState @relation(fields: [stateId], references: [id])
  task  Task      @relation(fields: [taskId], references: [id])
}

model TutoringPost {
  id          Int    @id @default(autoincrement())
  title       String @db.VarChar(200)
  description String @db.VarChar(500)
  userId      Int

  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id      Int     @id @default(autoincrement())
  title   String  @db.VarChar(100)
  message String  @db.VarChar(300)
  isRead  Boolean @default(false)
  userId  Int

  user User @relation(fields: [userId], references: [id])
}
