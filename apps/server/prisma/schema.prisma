// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  lastname  String
  carrier   String?
  avatar    String   @default("https://cdn.icon-icons.com/icons2/1378/PNG/512/avatardefault_92824.png")
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  periods   Period[] @relation("UserPeriods")
  task      Task[]
}

model Period {
  id        Int      @id @default(autoincrement())
  type      String
  number    Int
  year      Int
  code      String
  startDate DateTime
  endDate   DateTime
  courses   Course[]
  users     User[]   @relation("UserPeriods")
}

model Course {
  id         Int      @id @default(autoincrement())
  name       String
  code       String
  periodCode String
  state      String
  teacher    String
  credits    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  periodId   Int
  period     Period   @relation(fields: [periodId], references: [id])
  tasks      Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  state       String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])
}
